version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  docker: circleci/docker@1.3.0

executors:
  pkg:
    ## executor with fpm and npmbuild
    docker:
      - image: alanfranz/fpm-within-docker:centos-8

platform_matrix: &platform_matrix
  matrix:
    parameters:
      os: &oses ["linux", "darwin"] # <-- "windows" in the future!
      arch: &arches ["amd64", "arm64", "arm", "386"]
    exclude:
      - os: darwin
        arch: arm
      - os: darwin
        arch: "386"
    # exclude: # And when Windows comes, we'll need to exclude the Win+arm64 combo:
    #   - os: "windows"
    #     arch: "arm64"

jobs:
  test:
    docker:
      - image: cimg/go:1.18
    steps:
      - checkout
      - run: go test --timeout 10s -v ./...

  build_bins:
    docker:
      - image: cimg/go:1.18
    parameters:
      os:
        description: Target operating system
        type: enum
        enum: *oses
        default: "linux"
      arch:
        description: Target architecture
        type: enum
        enum: *arches
        default: "amd64"
    steps:
      - checkout
      - run: |
          GOOS=<< parameters.os >> \
          GOARCH=<< parameters.arch >> \
          CGO_ENABLED=0 \
          go build -ldflags "-X main.BuildID=${CIRCLE_TAG}" \
          -o ~/artifacts/rdslogs-<< parameters.os >>-<< parameters.arch >> \
          .
      - persist_to_workspace:
          root: ~/
          paths:
            - artifacts

  ## We only have to build packages for linux, so we iterate architectures and build rpm and deb for each.
  build_packages:
    executor: pkg
    parameters:
      arch:
        description: Target architecture
        type: enum
        enum: *arches
        default: "amd64"
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - run: ./build-pkg.sh -m << parameters.arch >> -v "${CIRCLE_TAG}" -t deb
      - run: ./build-pkg.sh -m << parameters.arch >> -v "${CIRCLE_TAG}" -t rpm
      - run: echo "finished builds" && find ~/artifacts -ls
      - persist_to_workspace:
          root: ~/
          paths:
            - artifacts
      - store_artifacts:
          path: ~/artifacts

  publish_github:
    docker:
      - image: cibuilds/github:0.13.0
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Publish Release on GitHub"
          command: |
            echo "about to publish to tag ${CIRCLE_TAG}"
            ls -l ~/artifacts/*
            ghr -draft -n ${CIRCLE_TAG} -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ~/artifacts

  publish_s3:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: sync_s3_artifacts
          command: aws s3 sync ~/artifacts s3://honeycomb-builds/honeycombio/rdslogs/${CIRCLE_TAG}/

  build_docker:
    docker:
      - image: cimg/go:1.18
    steps:
      - run: go install github.com/google/ko@latest
      - checkout
      - setup_remote_docker
      - run:
          name: build docker images and publish locally
          command: ./build-docker.sh

  publish_docker:
    docker:
      - image: cimg/go:1.18
    steps:
      - run: go install github.com/google/ko@latest
      - checkout
      - setup_remote_docker
      - run:
          name: build docker images and publish to Docker Hub
          environment:
            KO_DOCKER_REPO: honeycombio
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin;
            ./build-docker.sh

workflows:
  version: 2
  build:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
      - build_bins:
          <<: *platform_matrix
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - build_packages:
          matrix:
            parameters:
              arch: *arches
          context: Honeycomb Secrets for Public Repos
          requires:
            - build_bins
          filters:
            tags:
              # allow tags that start with t so we can test builds without publishing
              only: /^[vt].*/
            branches:
              ignore: /.*/
      - build_docker:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - publish_github:
          context: Honeycomb Secrets for Public Repos
          requires:
            - build_packages
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish_s3:
          context: Honeycomb Secrets for Public Repos
          requires:
            - build_packages
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish_docker:
          context: Honeycomb Secrets for Public Repos
          requires:
            - build_bins
            - build_docker
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
