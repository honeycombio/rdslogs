rds command line

cli reference:
http://docs.aws.amazon.com//cli/latest/reference/rds/download-db-log-file-portion.html
also general RDS logs page:
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html

example code from the AWS go SDK:
https://github.com/aws/aws-sdk-go/blob/master/service/rds/examples_test.go#L1330
go SDK docs (look for DownloadDBLogFilePortion and the following 3 fns):
http://docs.aws.amazon.com/sdk-for-go/api/service/rds/


possible configs
1) cronjob wraps rds CLI to download log, launches honeytail on it.
2) cronjob wraps gobin that downloads the log and streams in to honeytail STDIN
3) gobin that polls for new log files, writes out log files and calls out to honeytail
4) gobin that polls for new log files and streams to honeytail on STDIN
4) honeytail learns how to poll RDS directly
5) gobin that downloads log files and has honeytail baked in as a lib
7) gobin that downloads log files and sends directly using libhoney


features:
1) don't bake the AWS SDK into honeytail
2) call from cron
3) send all new data, don't re-send already sent data
4) no extra binaries to download
5) doesn't depend on having the AWS CLI installed

options:
a) (124) honeytail can call out to a CLI to get a log file that it will then parse (could be rds, could be anything, so long as the CLI results in a file to parse using whatever options show up).
b) (123) wrapper (sh/py/go) that calls out to RDS CLI, downloads a log, calls out to honeytail to parse it.
c) (1235) wrapper (py/go) that uses the RDS SDK to download a log file, calls out to honeytail to parse it.
d) (2345) honeytail can call out to the RDS SDK
e) (12) bash one-liner to pipe the output of the RDS CLI into honeytail


features I'm not planning on addressing:
* can use the table or file method of consuming RDS logs

RDS CLI: http://docs.aws.amazon.com//cli/latest/reference/rds/index.html#cli-aws-rds
* describe instances: http://docs.aws.amazon.com//cli/latest/reference/rds/describe-db-instances.html
* describe log files: http://docs.aws.amazon.com//cli/latest/reference/rds/describe-db-log-files.html
* download log files: http://docs.aws.amazon.com//cli/latest/reference/rds/download-db-log-file-portion.html


outline
* aws rds describe-db-instances <- get a list of instances
* try and figure out which one to get logs from. ask if can't figure it out
* aws rds describe-db-log-files --db-instance-identifier <value from describe instances>
* try and figure out which log files we haven't yet read.
* download the necessary logs
* aws rds download-db-log-file-portion --db-instance-identifier <value> --log-file-name <value> --starting-token 0 --output text > local_logfile.txt
* store state - instance identifier, log files (and info) consumed, etc.
* allow flags to indicate db instance ID.

It's unclear how paging will actually work - whether I'll need to run the CLI multpile times to get the whole file.
